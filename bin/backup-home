#!/bin/bash

# Restic
#
# add to crontab:
# 0 0 * * * /bin/sh /usr/local/sbin/backup-host.sh

# $1=command
# $2=path to keep backups
# $3=backup dir


set -e

BACKUP_DIR="${2:-$HOME/}"
INCLUDES_EXCLUDES="\
  --exclude-caches \
  --exclude-if-present .nobackup \
  --exclude-file $HOME/.backup_exclude"

if [ ! -f $HOME/.backup_exclude ];then touch $HOME/.backup_exclude;fi

RESTIC_REPOSITORY=${3:-rclone:pc:/Backups/workstations/$(hostname -s | tr '[:upper:]' '[:lower:]')}
RCLONE_BWLIMIT=1M

export RESTIC_REPOSITORY

RESTIC_CMD="sudo -E restic"

CLEAN_CMD="${RESTIC_CMD} \
    forget --keep-daily 7 --keep-weekly 5 --keep-monthly 12 --cleanup-cache"

PRUNE_CMD="${RESTIC_CMD} \
    prune"

BACKUP_CMD="${RESTIC_CMD} \
  backup --one-file-system ${BACKUP_DIR} \
  -r $RESTIC_REPOSITORY \
  ${INCLUDES_EXCLUDES}"

VERIFY_CMD="${RESTIC_CMD} \
  check --read-data"

RESTORE_CMD="${RESTIC_CMD} \
  restore latest  \
  --path ${BACKUP_DIR} \
  --target ${PWD}"

STATUS_CMD="${RESTIC_CMD} \
  snapshots"


case "$1" in

prune)
    echo ${PRUNE_CMD}; eval ${PRUNE_CMD}
    ;;
clean)
    echo ${CLEAN_CMD}; eval ${CLEAN_CMD}
    ;;
check)
    echo ${VERIFY_CMD}; eval ${VERIFY_CMD}
    ;;
restore)
    echo ${RESTORE_CMD};
    select yn in "Yes" "No"; do
      case $yn in
        Yes ) eval ${RESTIC_CMD}; break;;
        No ) exit;;
      esac
    done
    ;;
status)
    echo ${STATUS_CMD}; eval ${STATUS_CMD}
    ;;
backup)
    echo ${BACKUP_CMD};
    eval ${BACKUP_CMD};
    # select yn in "Yes" "No"; do
    #   case $yn in
    #     Yes ) eval ${BACKUP_CMD}; break;;
    #     No ) exit;;
    #   esac
    # done
    ;;
*)
    echo "Usage : $0 [clean, backup, check, restore(to current path), prune, status] <what> <where>"
    echo "what(default): $HOME/"
    echo "where(default): rclone:pc:/Backups/workstations"
    echo "Current backup command: ${BACKUP_CMD}"
   ;;
esac

unset RESTIC_REPOSITORY
